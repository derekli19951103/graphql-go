package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	DBModel "gql-go/db/model"
	"gql-go/graph/model"
)

// CreateGeoObject is the resolver for the createGeoObject field.
func (r *mutationResolver) CreateGeoObject(ctx context.Context, input model.CreateGeoObjectInput) (*model.GeoObject, error) {
	tokenUser, err := GetTokenUser(ctx)
	if err != nil {
		panic(err)
	}

	jsonProperties, err := mapToJSON(input.Properties)
	if err != nil {
		panic(err)
	}

	var content string
	var imageURL string

	if input.Content != nil {
		content = *input.Content
	}

	if input.ImageURL != nil {
		imageURL = *input.ImageURL
	}

	geoObject := DBModel.GeoObject{
		UserID:     tokenUser.ID,
		Type:       input.Type,
		Title:      input.Title,
		Content:    content,
		ImageUrl:   imageURL,
		Properties: jsonProperties,
	}

	result := r.DB.Create(&geoObject)

	return &model.GeoObject{
		ID:         geoObject.ID,
		Type:       geoObject.Type,
		Title:      geoObject.Title,
		Content:    &geoObject.Content,
		ImageURL:   &geoObject.ImageUrl,
		Properties: input.Properties,
		CreatedAt:  geoObject.CreatedAt,
		UpdatedAt:  geoObject.UpdatedAt,
	}, result.Error
}

// UpdateGeoObject is the resolver for the updateGeoObject field.
func (r *mutationResolver) UpdateGeoObject(ctx context.Context, input model.UpdateGeoObjectInput) (*model.GeoObject, error) {
	tokenUser, err := GetTokenUser(ctx)
	if err != nil {
		return nil, err
	}

	var geoObject DBModel.GeoObject
	result := r.DB.Where("id = ? AND user_id = ?", input.ID, tokenUser.ID).First(&geoObject)

	if result.Error != nil {
		return nil, result.Error
	}

	jsonProperties, err := mapToJSON(input.Properties)
	if err != nil {
		panic(err)
	}

	if input.Content != nil {
		geoObject.Content = *input.Content
	}

	if input.ImageURL != nil {
		geoObject.ImageUrl = *input.ImageURL
	}

	geoObject.Type = input.Type
	geoObject.Title = input.Title
	geoObject.Properties = jsonProperties

	result = r.DB.Save(&geoObject)

	return &model.GeoObject{
		ID:         geoObject.ID,
		Type:       geoObject.Type,
		Title:      geoObject.Title,
		Content:    &geoObject.Content,
		ImageURL:   &geoObject.ImageUrl,
		Properties: input.Properties,
		CreatedAt:  geoObject.CreatedAt,
		UpdatedAt:  geoObject.UpdatedAt,
	}, result.Error
}

// DeleteGeoObject is the resolver for the deleteGeoObject field.
func (r *mutationResolver) DeleteGeoObject(ctx context.Context, id int) (*model.GeoObject, error) {
	tokenUser, err := GetTokenUser(ctx)
	if err != nil {
		return nil, err
	}

	var geoObject DBModel.GeoObject
	result := r.DB.Where("id = ? AND user_id = ?", id, tokenUser.ID).First(&geoObject)

	if result.Error != nil {
		return nil, result.Error
	}

	result = r.DB.Delete(&geoObject)

	mapProperties, err := jsonToMap(geoObject.Properties)
	if err != nil {
		panic(err)
	}

	return &model.GeoObject{
		ID:         geoObject.ID,
		Type:       geoObject.Type,
		Title:      geoObject.Title,
		Content:    &geoObject.Content,
		ImageURL:   &geoObject.ImageUrl,
		Properties: mapProperties,
	}, result.Error
}

// GeoObjects is the resolver for the geoObjects field.
func (r *queryResolver) GeoObjects(ctx context.Context, userID int) ([]*model.GeoObject, error) {
	var geoObjects []DBModel.GeoObject
	result := r.DB.Where("user_id = ?", userID).Find(&geoObjects)

	if result.Error != nil {
		return nil, result.Error
	}

	var geoObjectModels []*model.GeoObject

	for _, geoObject := range geoObjects {
		mapProperties, err := jsonToMap(geoObject.Properties)
		if err != nil {
			panic(err)
		}

		geoObjectModels = append(geoObjectModels, &model.GeoObject{
			ID:         geoObject.ID,
			Type:       geoObject.Type,
			Title:      geoObject.Title,
			Content:    &geoObject.Content,
			ImageURL:   &geoObject.ImageUrl,
			Properties: mapProperties,
			CreatedAt:  geoObject.CreatedAt,
			UpdatedAt:  geoObject.UpdatedAt,
		})
	}

	return geoObjectModels, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
