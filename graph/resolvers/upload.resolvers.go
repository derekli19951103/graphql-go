package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	DBModel "gql-go/db/model"
	"gql-go/graph/model"
)

// CreateUpload is the resolver for the createUpload field.
func (r *mutationResolver) CreateUpload(ctx context.Context, input model.CreateUploadInput) (*model.Upload, error) {
	tokenUser, err := GetTokenUser(ctx)
	if err != nil {
		panic(err)
	}

	var filetype int
	switch input.Type {
	case model.FileTypeJSON:
		filetype = 1
	case model.FileTypeImage:
		filetype = 2
	default:
		filetype = 100
	}

	upload := DBModel.Upload{
		UserID: tokenUser.ID,
		Type:   filetype,
		URL:    input.URL,
	}

	result := r.DB.Create(&upload)

	return &model.Upload{
		ID:   upload.ID,
		Type: input.Type,
		URL:  upload.URL,
	}, result.Error
}

// DeleteUpload is the resolver for the deleteUpload field.
func (r *mutationResolver) DeleteUpload(ctx context.Context, id int) (*model.Upload, error) {
	tokenUser, err := GetTokenUser(ctx)
	if err != nil {
		panic(err)
	}

	var upload DBModel.Upload
	result := r.DB.Where("id = ? AND user_id = ?", id, tokenUser.ID).First(&upload)

	if result.Error != nil {
		return nil, result.Error
	}

	result = r.DB.Delete(&upload)

	return &model.Upload{
		ID:   upload.ID,
		Type: model.FileTypeJSON,
		URL:  upload.URL,
	}, result.Error
}

// GetUploads is the resolver for the getUploads field.
func (r *queryResolver) GetUploads(ctx context.Context, userID int, fileType *model.FileType) ([]*model.Upload, error) {
	var uploads []*DBModel.Upload
	var result []*model.Upload

	if fileType == nil {
		r.DB.Where("user_id = ?", userID).Find(&uploads)
	} else {
		var filetype int
		switch *fileType {
		case model.FileTypeJSON:
			filetype = 1
		case model.FileTypeImage:
			filetype = 2
		default:
			filetype = 100
		}

		r.DB.Where("user_id = ? AND type = ?", userID, filetype).Find(&uploads)
	}

	for _, upload := range uploads {
		var filetype model.FileType
		switch upload.Type {
		case 1:
			filetype = model.FileTypeJSON
		case 2:
			filetype = model.FileTypeImage
		default:
			filetype = model.FileTypeOther
		}

		result = append(result, &model.Upload{
			ID:   upload.ID,
			Type: filetype,
			URL:  upload.URL,
		})
	}

	return result, nil
}
