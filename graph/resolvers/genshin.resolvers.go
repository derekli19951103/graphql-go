package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"errors"
	"gql-go/api"
	"gql-go/graph/model"
)

// GenshinCharaters is the resolver for the genshinCharaters field.
func (r *queryResolver) GenshinCharaters(ctx context.Context, uid string, cookies string) ([]*model.GenshinCharater, error) {
	r.GenshinClient = &api.GenshinClient{Uid: uid, Server_id: "os_usa", Cookies: cookies}
	requestBody := map[string]any{
		"role_id": uid,
		"server":  "os_usa",
	}
	resp, err := r.GenshinClient.Fetch("game_record/genshin/api/character", requestBody)
	if err != nil {
		return make([]*model.GenshinCharater, 0), errors.New("can't get data")
	}

	var charaters []*model.GenshinCharater

	for i := range resp.Data.Avatars {
		charaters = append(charaters, &resp.Data.Avatars[i])
	}
	return charaters, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
